#+OPTIONS: ^:nil

* Find the shortest path with the greatest skill level between two users

** Example
#+Name: fig:Example1
# -*- find-file-hook: org-babel-execute-buffer -*-
#+BEGIN_SRC dot :file example1.png :cmdline -Kdot -Tpng

digraph G {
rankdir="LR";

edge [weight=2];

node [shape=circle,style=filled,fixedsize=true, width=0.5,height=0.5,fontsize=11, color=gray];

"1" [color=red];
"6" [color=blue];
"2" [color=gray];
"3" [color=gray];
"4" [color=gray];
"5" [color=gray];
"1" -> "2" [label="2"];
"1" -> "3" [label="4"];
"2" -> "3" [label="4"];
"2" -> "4" [label="6"];
"2" -> "5" [label="2"];
"3" -> "5" [label="2"];
"4" -> "6" [label="2"];
"5" -> "4" [label="6"];
"5" -> "6" [label="2"];
}

#+END_SRC
#+CAPTION: Example1
#+LABEL: fig:Example1
#+RESULTS: fig:Example1

*** The Json file

#+BEGIN_EXAMPLE
{"user" : 1 , "friends" : [2, 3], "skill" : 0}
{"user" : 2, "friends" : [3, 4, 5], "skill" : 2}
{"user" : 3, "friends" : [5], "skill" : 4}
{"user" : 4, "friends" : [6], "skill" : 6}
{"user" : 5, "friends" : [4, 6], "skill" : 2}
{"user" : 6, "friends" : [], "skill" : 2}
#+END_EXAMPLE

The shortest path according to the algorithm where skill inverted is used as
a weight, is:

#+BEGIN_EXAMPLE
1 -> 2 -> 4 -> 6
#+END_EXAMPLE

